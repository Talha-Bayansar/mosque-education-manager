generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  teamId    String?
  role      UserRole  @default(TEAM_MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  team      Team?     @relation(fields: [teamId], references: [id])
  tasks     Task[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id              String           @id @default(cuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  people          Person[]
  members         User[]
  groups          Group[]
  meetups         Meetup[]
  tasks           Task[]
  posterTemplates PosterTemplate[]
}

model Person {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  phoneNumber       String?
  dateOfBirth       DateTime? @db.Date
  country           String?
  city              String?
  zipCode           String?
  street            String?
  houseNumber       String?
  teamId            String
  team              Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  groups            Group[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  speakerMeetups    Meetup[]
  attendanceMeetups Meetup[]  @relation(name: "attendance_meetup")
}

model Group {
  id        String   @id @default(cuid())
  name      String
  members   Person[]
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  meetups   Meetup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String
}

model Meetup {
  id         String   @id @default(cuid())
  subject    String
  date       DateTime
  speaker    Person?  @relation(fields: [speakerId], references: [id])
  attendance Person[] @relation(name: "attendance_meetup")
  team       Team     @relation(fields: [teamId], references: [id])
  group      Group?   @relation(fields: [groupId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  speakerId  String?
  teamId     String
  groupId    String?
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime?
  assignedUser User?      @relation(fields: [userId], references: [id])
  team         Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  status       TaskStatus @default(BACKLOG)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String?
  teamId       String
}

model PosterTemplate {
  id        String   @id @default(cuid())
  utKey     String   @unique
  utUrl     String   @unique
  utName    String
  team      Team?    @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    String?
}

enum UserRole {
  ADMIN
  TEAM_MEMBER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}
